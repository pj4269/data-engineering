# exercise 1: 
import cassandra
from cassandra.cluster import Cluster

# create a connection to the database
cluster = Cluster(['127.0.0.1']) #If you have a locally installed Apache Cassandra instane
session = cluster.connect()

# create Keyspace(basicaly creating a class or a database) to work on 

session.execute(""" CREATE KEYSPACE IF NOT EXISTS udacity 
                    WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 }""" )

# connect to keyspace
session.set_keyspace('udacity')

# create tables: with Apache Cassandra you model the database tables on the queries you want to run.
'''
3 questions:

1. Give every album in the music library that was released in a given year 
select * from music_library WHERE YEAR=1970

2. Give every album in the music library that was created by a given artist
select * from artist_library WHERE artist_name="The Beatles"

3. Give all the information from the music library about a given album
select * from album_library WHERE album_name="Close To You"
'''
# a) Create 3 tables: 
# table 1
query = "CREATE TABLE IF NOT EXISTS music_library "
query = query + "(year int, artist_name text, album_name text, PRIMARY KEY (year, artist_name))" # partition key= year, clustering column = artist name =>  make each Primary Key unique.
session.execute(query)
# table 2    
query = "CREATE TABLE IF NOT EXISTS artist_library 
query = query + "(artist_name text, year int, album_name text, PRIMARY KEY (artist_name,  year))"# partition key= artist name, clustering column = year =>  make each Primary Key unique.
session.execute(query)

# table 3    
query = "CREATE TABLE IF NOT EXISTS album_library "
query = query + "(artist_name text, album_name text, year int, PRIMARY KEY (album_name, artist_name))"
session.execute(query)

# b) Insert data: 
query = "INSERT INTO music_library (year, artist_name, album_name)"
query = query + " VALUES (%s, %s, %s)"

query1 = "INSERT INTO artist_library (artist_name, year, album_name)"
query1 = query1 + " VALUES (%s, %s, %s)"

query2 = "INSERT INTO album_library (album_name, artist_name, year)"
query2 = query2 + " VALUES (%s, %s, %s)"

session.execute(query, (1970, "The Beatles", "Let it Be"))
session.execute(query, (1965, "The Beatles", "Rubber Soul"))
session.execute(query, (1966, "The Monkees", "The Monkees"))
session.execute(query1, ("The Monkees", 1966, "The Monkees"))
    
# This might have felt unnatural to insert duplicate data into the tables. If I just normalized these tables, I wouldn't have to have extra copies! While this is true, remember there are no JOINS in Apache Cassandra. For the benefit of high availibity and scalabity, denormalization must be how this is done.

# C) data validation: table 1 => select * from music_library WHERE YEAR=1970

query = "select * from music_library WHERE YEAR=1970"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
    print (row.year, row.artist_name, row.album_name,)

#table 2 => select * from artist_library WHERE ARTIST_NAME = "The Beatles"

query = "select * from artist_library WHERE ARTIST_NAME='The Beatles'"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
    print (row.artist_name, row.year, row.album_name)


# exercise 2: Primary Key => create a unique primary key! I can't be just artist_name coz an artist may have multiple songs!
# so create a primary key with artist_name and a song
# 1. Give every album in the music library that was created by a given artist

query = "CREATE TABLE IF NOT EXISTS music_library1 "
query = query + "(artist_name text, album_name text, year int, city text, PRIMARY KEY (artist_name, album_name))"
try:
    session.execute(query)
except Exception as e:
    print(e)
# select * from music_library WHERE artist_name="The Beatles"
query = "INSERT INTO music_library1 (artist_name, album_name, year, city)"
query = query + " VALUES (%s, %s, %s, %s)"

session.execute(query, ("The Beatles", "Let it Be", 1970, "Liverpool"))
session.execute(query, ("The Beatles", "Rubber Soul", 1965, "Oxford"))
# validation: select * from music_library WHERE artist_name="The Beatles" =>

query = "select * from music_library1 WHERE artist_name='The Beatles'"
try:
    rows = session.execute(query)
except Exception as e:
    print(e)
    
for row in rows:
    print (row.year, row.artist_name, row.album_name, row.city)

# Exercise 3: Focus on Clustering Columns
# we want to ask a question: select * from album_library WHERE album_name="Liverpool"


query = "CREATE TABLE IF NOT EXISTS music_library "
query = query + "(album_name text, artist_name text, year int, city text, PRIMARY KEY (album_name, artist_name))"
try:
    session.execute(query)
except Exception as e:
    print(e)

query = "INSERT INTO music_library (album_name, artist_name, year, city)"
query = query + " VALUES (%s, %s, %s, %s)"

try:
    session.execute(query, ("Let it Be", "The Beatles", 1970, "Liverpool"))
except Exception as e:
    print(e)
    

# validation
query = "select * from music_library WHERE album_NAME='Close To You'"
rows = session.execute(query)
    
for row in rows:
    print (row.artist_name, row.album_name, row.city, row.year)
