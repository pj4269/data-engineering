reference: 1. https://shermandigital.com/blog/designing-a-cassandra-data-model/
           2. https://www.datastax.com/dev/blog/allow-filtering-explained-2
NoSQL = Not Only SQL
- already optimized for writes so focus is on reads!
- we r dealing ith terabytes of data here!

Cassandra: 

- Does not support duplicate rows!
- must use WHERE clause! (its for huge data)
- partitioning = creating new tables from the source database!
- partition key = primary key 
- Clustering keys are responsible for sorting data within a partition.
A)

When Not to Use SQL:
- Need High Availability= System is always up and there is no downtime => distributed db=many machines (horizontally scaled) => you need copies of your data => 1 of your computer will go down(out of 7000) => need a copy of a data
                    => some of them will not have an updated data => but eventually will catch up = Eventual Consistency
- Have Large Amounts of Data
- Need Linear Scalability: The need to add more nodes to the system so performance will increase linearly
- Low Latency: Shorter delay before the data is transferred once the instruction for the transfer has been received.
- Need fast reads and write

B) CAP theorem: distributed system will give 2/3 guarantees: 
- Consistency: Every read from the database gets the latest (and correct) piece of data or an error
- Availability: Every request is received and a response is given -- without a guarantee that the data is the latest update
- Partition Tolerance: The system continues to work regardless of losing network connectivity between nodes

C) Denormalization: NUMBER 1 PRIORITY!!! When data modeling in Cassandra, think about your queries first! No JOINS in Cassandra!
  - 1 table per query!

D) CQL = name of the query language in Cassandra (with no Joins or Group by)

E ) Primary Key (partition key(year = distributes the data across nodes or machines) + clustering columns(artist_name = ascending order = used for sorting))
          => use partition key + clustering columns with WHERE statement to fetch the data!
- Must be unique
- The PRIMARY KEY is made up of either just the PARTITION KEY or may also include additional CLUSTERING COLUMNS
- A Simple PRIMARY KEY is just one column that is also the PARTITION KEY. 
- A Composite PRIMARY KEY is made up of more than one column and will assist in creating a unique value and in your retrieval queries
- The PARTITION KEY will determine the distribution of data across the system

F) Clustering columns: 
