Follows 12 rules: 

A) Rule 1: The information rule:
All information in a relational database is represented explicitly at the logical level and in exactly one way â€“ by values in tables.

B) Importance of Relational Databases:
- Standardization of data model: Once your data is transformed into the rows and columns format, your data is standardized and you can query it with SQL
- Flexibility in adding and altering tables: Relational databases gives you flexibility to add tables, alter tables, add and remove data.
- Data Integrity: Data Integrity is the backbone of using a relational database.
- Standard Query Language (SQL): A standard language can be used to access the data with a predefined language.
- Simplicity : Data is systematically stored and modeled in tabular format.
- Intuitive Organization: The spreadsheet format is intuitive but intuitive to data modeling in relational databases.

C) 
Online Analytical Processing (OLAP): Used for analysis => complex queries => total # of shoes sold(aggregate the data)
                               =>  complex analytical and ad hoc queries, including aggregations. => optimized for reads.

Online Transactional Processing (OLTP): Used for transactions => simple queries => price of shoes
                               => for less complex queries in large volume. Queries are read, insert, update, and delete.

D) Structuring the DB: 
Queries: 
1. Normalization: increase data integrity(queries must return correct answer) and reduce redundancy(copies) => goes through 3 normal forms
2. DeNormalization: to increase performance => there could be copies of data


E) Normalization: 
First Normal Form (1NF):

- Atomic values: each cell contains unique and single values => no set, list, tuple in a column
- Be able to add data without altering tables
- Separate different relations into different tables=> we don't want just 1 giant table that holds everything!
- Keep relationships between tables together with foreign keys => we need a way to keep the relationship between tables

Second Normal Form (2NF):

- Have reached 1NF
- All columns in the table must rely on the Primary Key

Third Normal Form (3NF):

- Must be in 2nd Normal Form
- No transitive dependencies => if there's a duplicate data in a column, break it down to 2 separate tables.

Remember, transitive dependencies you are trying to maintain is that to get from A-> C, you want to avoid going through B.

F) Exercise: 
    import psycopg2
    conn = psycopg2.connect("host=127.0.0.1 dbname=studentdb user=student password=student")
    cur = conn.cursor()
    conn.set_session(autocommit=True)

    cur.execute("CREATE TABLE IF NOT EXISTS music_store (transaction_id serial primary key, Customer_Name varchar, Cashier_Name varchar\
    , Year int, Albums_Purchased text[])")
    cur.execute("INSERT INTO music_store (transaction_id, Customer_Name, Cashier_Name\
    , Year, Albums_Purchased) \
                 VALUES (%s, %s, %s, %s, %s)", \
                 (1 , 'Amanda', 'Sam', 2000, ['Rubber Soul', 'Let it Be'])) 
    cur.execute("INSERT INTO music_store (transaction_id, Customer_Name, Cashier_Name\
    , Year, Albums_Purchased) \
                 VALUES (%s, %s, %s, %s, %s)", \
                 (2 , 'Toby', 'Sam', 2000, ['My Generation']))
    cur.execute("SELECT * FROM music_store;")

    row = cur.fetchone()

    while row:
       print(row)
       row = cur.fetchone()




#3. Fact/Dimension
